rokku {
    # Default interface and port to listen on.
    http {
        bind = "127.0.0.1"
        port = 8987
    }

    ranger {
        # Settings for reaching Ranger.

        # make sure the service_type is equal to what is specified in
        # ranger-s3-security.xml
        service_type = "s3"
        app_id = "testservice"
        allow-list-buckets = true
        user-domain-postfix = ""
        enabled-audit = false
        role-prefix = "role_"
    }

    storage.s3 {
        # Settings for reaching backing storage.
        host = "127.0.0.1"
        port = 8010
        schema = "http"

        admin {
            accesskey = "accesskey"
            secretkey = "secretkey"
        }
        region = "us-east-1"
        v2SignatureEnabled = false

        healthCheck {
           # can be one of:
           #   s3ListBucket  - uses AWS S3 client to list single bucket
           method = "s3ListBucket"
           interval = 5000
           bucketName = "rokku_hc_bucket"
        }

    }

    sts {
        uri = "http://127.0.0.1:12345"
        encodeSecret = "jwtprivatekey"
        cache.ttlInSeconds = 5
    }

    kerberos {
        keytab = ""
        principal = ""
    }

    bucketNotificationEnabled = false
    auditEnable = false

    storage.s3.request.queue {
        enable = false
        size = 100
        max.size.to.block.in.percent = 80
    }
}

akka {
    loggers = ["akka.event.slf4j.Slf4jLogger"]
    loglevel = "DEBUG"
    logging-filter = "akka.event.slf4j.Slf4jLoggingFilter"

    http {
        # quiases aws illegal warnings for "/" in authorization header
        server.parsing.illegal-header-warnings = off

        # Enable remote address header to find origin of request
        server.remote-address-header = on

        # we need to disable head to get translation
        server.transparent-head-requests = off

        # loosens parsing headers settings, letting us to parse AWS headers properly
        # raw-request is used for AWS signature process, skip akka parsing
        server.raw-request-uri-header = on
        server.parsing.modeled-header-parsing = off
        client.parsing.modeled-header-parsing = off
        client.user-agent-header = ""
    }
}

kafka.producer {
    # A comma-separated list of host/port pairs to use for establishing the initial connection to the Kafka cluster
    bootstrapServers = "kafka:9092"
    protocol = "PLAINTEXT"
    createTopic = "create_events"
    deleteTopic = "delete_events"
    auditTopic = "audit_events"
    retries = 3
    backoff = 3000
    backoffMax = 3000
    requestTimeoutMs = 300000
    maxblock = 1000
    ssl.truststore.location = ""
    ssl.truststore.password = ""
    ssl.keystore.location = ""
    ssl.keystore.password = ""
    ssl.key.password = ""
}
