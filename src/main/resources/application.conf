rokku {
    # Default interface and port to listen on.
    http {
        bind = ${?ROKKU_HTTP_BIND}
        port = ${?ROKKU_HTTP_PORT}
    }
    access-control {
        allow-list-buckets = ${?ROKKU_ALLOW_LIST_BUCKETS}
        allow-create-delete-buckets = ${?ROKKU_ALLOW_CREATE_DELETE_BUCKETS}
        enabled-audit = ${?ROKKU_ENABLED_AUDIT}
        class-name = ${?ROKKU_ACCESS_CONTROL_CLASS_NAME}
        plugin-params = ${?ROKKU_ACCESS_CONTROL_PLUGIN_PARAMS}
    }
    storage.s3 {
        # Settings for reaching backing storage.
        host = ${?ROKKU_STORAGE_S3_HOST}
        port = ${?ROKKU_STORAGE_S3_PORT}
        schema = ${?ROKKU_STORAGE_S3_SCHEMA}

        admin {
            accesskey = ${?ROKKU_STORAGE_S3_ADMIN_ACCESSKEY}
            secretkey = ${?ROKKU_STORAGE_S3_ADMIN_SECRETKEY}
        }
        region = ${?ROKKU_STORAGE_S3_AWS_REGION}
        v2SignatureEnabled = ${?ROKKU_STORAGE_S3_V2_ENABLED}
        # To add more then one code, seperate them with comma
        slowdownCodes = ${?ROKKU_STORAGE_S3_SLOWDOWN_CODES}
        healthCheck {
           # can be one of:
           #   s3ListBucket  - uses AWS S3 client to list single bucket
           method = ${?ROKKU_STORAGE_S3_HC_METHOD}
           interval = ${?ROKKU_STORAGE_S3_HC_INTERVAL}
           bucketName = ${?ROKKU_STORAGE_S3_HC_BUCKET}
        }
    }

    sts {
        uri = ${?ROKKU_STS_URI}
        encodeSecret = ${?ROKKU_STS_ENCODE_SECRET}
        cache.ttlInSeconds = ${?ROKKU_STS_CACHE_TTL_IN_SECONDS}
    }

    kerberos {
        keytab = ${?ROKKU_KERBEROS_KEYTAB}
        principal = ${?ROKKU_KERBEROS_PRINCIPAL}
    }

    bucketNotificationEnabled = ${?ROKKU_BUCKET_NOTIFY_ENABLED}

    auditEnable = ${?ROKKU_AUDIT_ENABLED}

    storage.s3.request.queue {
        enable = ${?ROKKU_REQUEST_S3_QUEUE_ENABLED}
        size = ${?ROKKU_REQUEST_S3_QUEUE_SIZE}
        max.size.to.block.in.percent = ${?ROKKU_REQUEST_S3_QUEUE_MAX_SIZE_TO_BLOCK_IN_PERCENT}
    }

    namespaces {
            enable = ${?ROKKU_NAMESPACES_ENABLED}
            env.var.credentials.prefix = ${?ROKKU_NAMESPACES_ENV_VAR_S3_CREDENTIALS_PREFIX} # key is namespace name and value is accesskey,secretkey (separated by comma)
        }
}

kafka.producer {
    bootstrapServers = ${?ROKKU_KAFKA_BOOTSTRAP_SERVERS}
    protocol = ${?ROKKU_KAFKA_PROTOCOL}
    createTopic = ${?ROKKU_KAFKA_CREATE_TOPIC}
    deleteTopic = ${?ROKKU_KAFKA_DELETE_TOPIC}
    auditTopic = ${?ROKKU_KAFKA_AUDIT_TOPIC}
    retries = ${?ROKKU_KAFKA_PRODUCER_RETRIES}
    backoff = ${?ROKKU_KAFKA_PRODUCER_BACKOFF}
    backoffMax = ${?ROKKU_KAFKA_PRODUCER_BACKOFFMAX}
    requestTimeoutMs = ${?KAFKA_PRODUCER_REQUEST_TIMEOUT_MS}
    maxblock = ${?ROKKU_KAFKA_PRODUCER_MAXBLOCK}
    ssl.truststore.location = ${?ROKKU_KAFKA_PRODUCER_SSL_TRUSTSTORE_LOCATION}
    ssl.truststore.password = ${?ROKKU_KAFKA_PRODUCER_SSL_TRUSTSTORE_PASSWORD}
    ssl.keystore.location = ${?ROKKU_KAFKA_PRODUCER_SSL_KEYSTORE_LOCATION}
    ssl.keystore.password = ${?ROKKU_KAFKA_PRODUCER_SSL_KEYSTORE_PASSWORD}
    ssl.key.password = ${?ROKKU_KAFKA_PRODUCER_SSL_KEY_PASSWORD}
}

akka {
    http {
        host-connection-pool.max-open-requests = ${?ROKKU_MAX_OPEN_REQUESTS}
        host-connection-pool.max-connections = ${?ROKKU_MAX_CONNECTIONS}
        host-connection-pool.max-retries = ${?ROKKU_HOST_POOL_MAX_RETRIES}
        host-connection-pool.response-entity-subscription-timeout = ${?ROKKU_RESPONSE_ENTITY_TIMEOUT}
    }
}

